defmodule MsgpackerTest do
  use ExUnit.Case
  doctest Msgpack

  @doc "Test Atoms packing"
  test "should pack nil" do
    assert Msgpack.pack(nil) == <<0xC0>>
  end

  test "shpuld pack true" do
    assert Msgpack.pack(true) == <<0xC3>>
  end

  test "should pack false" do
    assert Msgpack.pack(false) == <<0xC2>>
  end

  @doc "Test Integer packing"
  test "should correctly pack 0" do
    assert Msgpack.pack(0) == <<0>>
  end

  test "should correcty pack 1" do
    assert Msgpack.pack(1) == <<0x01>>
  end

  test "should correctly pack 127" do
    assert Msgpack.pack(127) == <<0x7F>>
  end

  test "should pack int7" do
    assert Msgpack.pack(11) == <<0x0B>>
  end

  test "should correctly pack 128" do
    assert Msgpack.pack(128) == <<0xCC, 0x80>>
  end

  test "should correctly pack 255" do
    assert Msgpack.pack(255) == <<0xCC, 0xFF>>
  end

  test "should correctly pack 65,536" do
    assert Msgpack.pack(65_536) == <<0xCE, 0x00, 0x01, 0x00, 0x00>>
  end

  test "should correctly pack 4,294,967,295" do
    assert Msgpack.pack(4_294_967_295) == <<0xCE, 0xFF, 0xFF, 0xFF, 0xFF>>
  end

  test "should correctly pack 4,294,967,296" do
    assert Msgpack.pack(4_294_967_296) == <<0xCF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00>>
  end

  test "should correctly pack 18,446,744,073,709,551,615" do
    assert Msgpack.pack(18_446_744_073_709_551_615) ==
             <<0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF>>
  end

  test "should correctly pack -32" do
    assert Msgpack.pack(-32) == <<0xE0>>
  end

  test "should correctly pack -33" do
    assert Msgpack.pack(-33) == <<0xD0, 0xDF>>
  end

  test "should correctly pack -127" do
    assert Msgpack.pack(-127) == <<0xD0, 0x81>>
  end

  test "should correctly pack -128" do
    assert Msgpack.pack(-128) == <<0xD1, 0xFF, 0x80>>
  end

  test "should correctly pack -32_767" do
    assert Msgpack.pack(-32_767) == <<0xD1, 0x80, 0x01>>
  end

  test "should correctly pack -32_768" do
    assert Msgpack.pack(-32_768) == <<0xD2, 0xFF, 0xFF, 0x80, 0x00>>
  end

  test "should correctly pack -2_147_483_647" do
    assert Msgpack.pack(-2_147_483_647) == <<0xD2, 0x80, 0x00, 0x00, 0x01>>
  end

  test "should correctly pack -2_147_483_648" do
    assert Msgpack.pack(-2_147_483_648) ==
             <<0xD3, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00>>
  end

  test "should correctly pack -9_223_372_036_854_775_808" do
    assert Msgpack.pack(-9_223_372_036_854_775_808) ==
             <<0xD3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00>>
  end

  @doc "Test float"
  test "should pack float number 123.12" do
    expected = <<0xCB, 0x40, 0x5E, 0xC7, 0xAE, 0x14, 0x7A, 0xE1, 0x48>>
    assert Msgpack.pack(123.12) == expected
  end

  test "should pack float number 0.1" do
    assert Msgpack.pack(0.1) == <<0xCB, 0x3F, 0xB9, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9A>>
  end

  test "should pack float number 123.123123123123" do
    expected = <<0xCB, 0x40, 0x5E, 0xC7, 0xE1, 0x3F, 0xCE, 0xCC, 0x75>>
    assert Msgpack.pack(123.123123123123) == expected
  end

  @doc "Test Bitstring pack"
  test "should correctly pack empty string" do
    assert Msgpack.pack("") == <<0xA0>>
  end

  test "should correctly pack 'Not very long string &'" do
    assert Msgpack.pack("Not very long string &") ==
             <<0xB6, 0x4E, 0x6F, 0x74, 0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6C, 0x6F, 0x6E, 0x67,
               0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x26>>
  end

  test "should map correctly 'Test1'" do
    assert Msgpack.pack("Test1") == <<0xA5, 0x54, 0x65, 0x73, 0x74, 0x31>>
  end

  @doc "Test map"
  test "should pack simple map - fixedmap" do
    map = %{
      "compact" => true,
      "schema" => 0
    }

    expected =
      <<0x82, 0xA7, 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0xC3, 0xA6, 0x73, 0x63, 0x68, 0x65,
        0x6D, 0x61, 0x00>>

    assert Msgpack.pack(map) == expected
  end

  test "should pack complex map with 16" do
    input = %{
      "test1" => 1,
      "test2" => 1,
      "test3" => 1,
      "test4" => 1,
      "test5" => 1,
      "test6" => 1,
      "test7" => 1,
      "test8" => 1,
      "test9" => 1,
      "test10" => 1,
      "test11" => 1,
      "test12" => 1,
      "test13" => 1,
      "test14" => 1,
      "test15" => 1,
      "test16" => 1,
      "test17" => 1
    }

    expected =
      <<0xDE, 0x00, 0x11, 0xA5, 0x74, 0x65, 0x73, 0x74, 0x31, 0x01, 0xA5, 0x74, 0x65, 0x73, 0x74,
        0x32, 0x01, 0xA5, 0x74, 0x65, 0x73, 0x74, 0x33, 0x01, 0xA5, 0x74, 0x65, 0x73, 0x74, 0x34,
        0x01, 0xA5, 0x74, 0x65, 0x73, 0x74, 0x35, 0x01, 0xA5, 0x74, 0x65, 0x73, 0x74, 0x36, 0x01,
        0xA5, 0x74, 0x65, 0x73, 0x74, 0x37, 0x01, 0xA5, 0x74, 0x65, 0x73, 0x74, 0x38, 0x01, 0xA5,
        0x74, 0x65, 0x73, 0x74, 0x39, 0x01, 0xA6, 0x74, 0x65, 0x73, 0x74, 0x31, 0x30, 0x01, 0xA6,
        0x74, 0x65, 0x73, 0x74, 0x31, 0x31, 0x01, 0xA6, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32, 0x01,
        0xA6, 0x74, 0x65, 0x73, 0x74, 0x31, 0x33, 0x01, 0xA6, 0x74, 0x65, 0x73, 0x74, 0x31, 0x34,
        0x01, 0xA6, 0x74, 0x65, 0x73, 0x74, 0x31, 0x35, 0x01, 0xA6, 0x74, 0x65, 0x73, 0x74, 0x31,
        0x36, 0x01, 0xA6, 0x74, 0x65, 0x73, 0x74, 0x31, 0x37, 0x01>>

    assert Msgpack.pack(input) == expected
  end

  @doc "Test list"
  test "should pack fixed list" do
    l = ["asd", 21, 21]
    expected = <<0x93, 0xA3, 0x61, 0x73, 0x64, 0x15, 0x15>>

    assert Msgpack.pack(l) == expected
  end

  test "should pack 16bits list" do
    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7]

    e =
      <<0xDC, 0x00, 0x11, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x01, 0x02,
        0x03, 0x04, 0x05, 0x06, 0x07>>

    assert Msgpack.pack(l) == e
  end

  test "should pack empty list" do
    expected = <<0x90>>
    input = []

    assert Msgpack.pack(input) == expected
  end
end
